@startuml
left to right direction
'skinparam linetype polyline
'skinparam linetype ortho
enum Difficulty {
Easy
Medium
Hard
}

enum Operation {
Addition
Substraction
Multiplication
Division
}

abstract class BlazerComponentBase {
}

class AccountPage extends BlazerComponentBase {
  - string username 
  + string accountUsername
  + string accountPassword
  + bool isUsernameNew
  + bool incorectLogIn

  + LogInEventAsync()
  + LogOffEvent()
  + SignUpEventAsync()
}

class User {
  + int Id
  + Username : string
  + Password : string
  + bool IsPrivate
  + List<Score<MathGamePageData>> MathGamePageScores
  + List<Score<SudokuData>> SudokuScores
  + List<Score<AimTrainerData>> AimTrainerScores
  + List<Score<PairUpData>> PairUpScores
}

class MathGamePage extends BlazerComponentBase {
-int score
-string question
-List<int> options
-boolean? isCorrect
+generateQuestion()
+checkAnswer(int option)
}

class SudokuGamePage extends BlazerComponentBase {
-int[,] grid
-int[,] solution
-int elapsedTime
-List<int> possibleValues
+generateSudoku()
+checkSolution()
}

class PairMatchingGamePage extends BlazerComponentBase {
-List<Card> cards
-int matchedPairs
-int mistakes
+generateCardDeck()
+checkSelectedCards()
}

class AimTrainerPage extends BlazerComponentBase {
-int score
-int x,
-int y targetPosition
-int moveDirection
+onTargetClicked()
+moveTarget()
}

class SettingsPage extends BlazerComponentBase {
  - bool IsPrivateActive
  - TogglePrivate()
}

class UserScoreDto <T: Class> {
  + string Username
  + bool IsPrivate
  + DateTime Timestamp
  + T GameData 
  + ShowOtherDateTimeFormat()
}

class StatisticsPage extends BlazerComponentBase {
  + Dictionary<string, List<UserScoreDto>> GameScores 
  + Dictionary<string, int> GamePlayedCounts
  + Dictionary<string, GameScore> GameHighscores
  + Dictionary<string, GameScore> GameAllTimeAverages
  + Dictionary<string, List<AverageScoreDto>> GameAverageLast7Days

  - ToggleGameInfo()
  - SetActiveDifficulty()
  - SetActiveSizeSudoku()
  + LoadAllGameScoresAsync()
  + LoadGameScoresAsync()
  + LoadAllGameDatasetsAsync()
  + LoadGameDatasetsAsync()
}

class AverageScoreDto {
  + Date : DateTime
  + Score : GameScore
}

AverageScoreDto <.. StatisticsPage
AverageScoreDto <.. AccountScoreController
AccountScoreController ..> UserScoreDto

class TimerService {
+int RemainingTime
+Start()
+Stop()
+OnTick()
}

class AccountScoreController <<Controller>> {
+GetGameScores()
+GetGameHighscore()
+GetGameMatchesPlayed()
+GetGameAverageScore()
+GetGameAverageScoreLast7Days()
}


class AimTrainerController <<Controller>> {
+SaveScoreAsync()
+GetUserHighscoreAsync()
+GetTopScoresAsync()
}

class MathGameController <<Controller>> {
+GetQuestion()
+GetOptions()
+CheckAnswer()
+SaveScoreAsync()
+GetUserHighscoreAsync()
+GetTopScoresAsync()
}

class PairUpController <<Controller>> {
+SaveScoreAsync()
+GetUserHighscoreAsync()
+GetTopScoresAsync()
}

class SudokuController <<Controller>> {
+GenerateSolvedSudoku()
+HideNumbers()
+SaveScoreAsync()
+GetUserHighscoreAsync()
+GetTopScoresAsync()
}

class UserController <<Controller>> {
+CreateUserAsync()
+LogInAsync()
+LogOff()
+GetUsernamesAsync()
+ChangePrivateAsync()
+GetPrivateAsync()
}

class AccountScoreService {
  - int lastGamesCount
  - IScoreRepository repository

  + AccountScoreService()
  - Task<List<UserScoreDto<T>>> GetUserSpecificScores<T>()
  + Task<List<UserScoreDto<T>>> GetUserScores<T>()
  + Task<GameScore> GetHighscore<T>()
  + Task<GameScore> GetAllTimeAverageScore<T>()
  + Task<int> GetMatchesPlayed<T>()
  + Task<List<AverageScoreDto>> GetAverageScoreLast7Days<T>()
}

class AimTrainerService {
  - IScoreRepository _scoreRepository

  + AimTrainerService()
  + Task AddScoreToDbAsync()
  + Task<UserScoreDto<AimTrainerData>> GetUserHighscoreAsync()
  + Task<List<UserScoreDto<AimTrainerData>>> GetTopScoresAsync()
}

AimTrainerService --o AimTrainerController
AimTrainerService ..> UserScoreDto

class PairUpService {
  - IScoreRepository _scoreRepository

  + PairUpService()
  + Task AddScoreToDbAsync()
  + Task<UserScoreDto<PairUpData>> GetUserHighscoreAsync()
  + Task<List<UserScoreDto<PairUpData>>> GetTopScoresAsync()
}

class SudokuService {
  - IntVar[,] _possibleGrid
  - SolutionCollector _solutionCollector

  + GetUserHighscoreAsync()
  + GetTopScoresAsync()
  + HideNumbers()
  + GenerateSolvedSudoku()
  - SolveSudoku()
  - IsValidMove()
}

class UserService {
  - UserTrackingService _userTrackingService

  + UserService()
  + CreateUserAsync()
  + LogInToUserAsync()
  + LogOffFromUser()
  + GetUsernamesAsync()
  + ChangePrivateAsync()
  + GetPrivateAsync()
}

UserService --o UserController

class UserTrackingService {
  - ConcurrentDictionary<string, DateTime> _activeUsers

  + AddOrUpdateUser()
  + RemoveUser()
  + GetActiveUsers()
}

class MathGameService {
  - IMathCalculationService _mathCalculationService
  - IMathGenerationService _mathGenerationService
  + int Answer
  + List<int> numbers
  + List<Operation> operations

  + MathGameService()
  + GenerateQuestion()
  + CheckAnswer()
  + GenerateOptions()
  - BuildQuestionToString()
}

class ScoreRepository {
  - UserDbContext _userDbContext

  + ScoreRepository()
  + AddScoreToUserAsync()
  + GetHighscoreFromUserAsync()
  + GetAllScoresAsync()
}

class UserRepository {
  - UserDbContext _userDbContext

  + UserRepository()
  + Task CreateUserAsync()
  + Task<List<User>> GetAllUsersAsync()
  + Task<bool> ValidateUserAsync()
  + Task ChangePrivateAsync()
  + Task<bool> GetPrivateAsync()
}


PairUpService --o PairUpController
PairUpService ..> UserScoreDto


UserTrackingService --o UserService

MathGameService --o MathGameController


ScoreRepository --o AccountScoreService
ScoreRepository --o AimTrainerService
ScoreRepository --o PairUpService
ScoreRepository --o SudokuService
ScoreRepository --o MathGameService


UserRepository --o UserService


SudokuService --o SudokuController
SudokuService ..> UserScoreDto

AccountScoreService --o AccountScoreController
AccountScoreService ..> UserScoreDto

SettingsPage ..> User

Difficulty --o MathGamePage
Difficulty --o SudokuGamePage
Difficulty --o PairMatchingGamePage
Difficulty --o AimTrainerPage
Operation --o MathGamePage

User <.. AccountPage
UserController ..> User

UserScoreDto <.. StatisticsPage

MathGamePage ..> UserScoreDto
SudokuGamePage ..> UserScoreDto
PairMatchingGamePage ..> UserScoreDto
AimTrainerPage ..> UserScoreDto


UserScoreDto <.. MathGameController
UserScoreDto <.. SudokuController
UserScoreDto <.. PairUpController  
UserScoreDto <.. AimTrainerController


AimTrainerPage *-- TimerService
SudokuGamePage *-- TimerService
PairMatchingGamePage *-- TimerService
MathGamePage *-- TimerService

@enduml